import { InlineKeyboard } from 'grammy';
import { CommandHandler } from '../../core/CommandHandler.js';

/**
 * Handles the /start command.
 */
export class StartCommand extends CommandHandler {
  /**
   * @param {Object} params Constructor parameters.
   * @param {import('../services/GuideService.js').GuideService} params.guideService Guide service used to list guides.
   * @param {{ noGuides: string }} params.messages Shared user messages.
   * @param {import('../services/SubscriptionService.js').SubscriptionService} [params.subscriptionService] Subscription service.
   * @param {import('../services/MenuMediaService.js').MenuMediaService} [params.menuMediaService] Menu media service.
   * @param {import('../../core/Logger.js').Logger} [params.logger] Logger.
   */
  constructor({ guideService, messages, subscriptionService, menuMediaService, logger }) {
    super('start');
    this.guideService = guideService;
    this.messages = messages;
    this.subscriptionService = subscriptionService ?? null;
    this.menuMediaService = menuMediaService ?? null;
    this.logger = logger;
  }

  /**
   * @override
   * @param {import('grammy').Bot} bot Telegram bot instance.
   */
  register(bot) {
    super.register(bot);

    bot.callbackQuery('consent_accept', async (ctx) => this.handleConsentAccept(ctx));
    bot.callbackQuery('consent_decline', async (ctx) => this.handleConsentDecline(ctx));

    const subscriptionCallback = this.subscriptionService?.getCallbackData();
    if (subscriptionCallback) {
      bot.callbackQuery(subscriptionCallback, async (ctx) => {
        try {
          const subscribed = await this.subscriptionService.handleCallback(ctx);
          if (subscribed) {
            await this.sendGuidesMenu(ctx);
          }
        } catch (error) {
          this.logger?.error('Failed to process subscription callback.', error);
          await ctx.reply(this.messages.noGuides);
        }
      });
    }
  }

  /**
   * Sends a greeting message to the user.
   * @param {import('grammy').Context} ctx Grammy context.
   * @returns {Promise<void>}
   */
  async execute(ctx) {
    const message = [
      '–ú—ã –±–µ—Ä–µ–∂–Ω–æ –æ—Ç–Ω–æ—Å–∏–º—Å—è –∫ –≤–∞—à–∏–º –¥–∞–Ω–Ω—ã–º üíö',
      '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∞ —Ç–∞–∫–∂–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—à–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏:',
      '',
      '‚Ä¢ <a href="https://zagorodom96.ru/privacy">–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>',
      '‚Ä¢ <a href="https://mantsova.tilda.ws/soglasie">–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</a>',
      '‚Ä¢ <a href="https://mantsova.tilda.ws/oferta">–î–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã</a>'
    ].join('\n');

    const keyboard = new InlineKeyboard()
      .text('–°–æ–≥–ª–∞—à–∞—é—Å—å', 'consent_accept')
      .text('–ù–µ —Å–æ–≥–ª–∞—à–∞—é—Å—å', 'consent_decline');

    await ctx.reply(message, {
      parse_mode: 'HTML',
      disable_web_page_preview: true,
      reply_markup: keyboard
    });
  }

  /**
   * Handles consent acceptance.
   * @param {import('grammy').CallbackQueryContext<import('grammy').Context>} ctx Grammy callback context.
   * @returns {Promise<void>}
   */
  async handleConsentAccept(ctx) {
    try {
      await ctx.answerCallbackQuery();

      if (this.subscriptionService?.isEnabled()) {
        await this.subscriptionService.sendPrompt(ctx);
        return;
      }

      await this.sendGuidesMenu(ctx);
    } catch (error) {
      this.logger?.error('Failed to process consent accept.', error);
      await ctx.reply(this.messages.noGuides);
    }
  }

  /**
   * Handles consent decline by showing an alert.
   * @param {import('grammy').CallbackQueryContext<import('grammy').Context>} ctx Grammy callback context.
   * @returns {Promise<void>}
   */
  async handleConsentDecline(ctx) {
    await ctx.answerCallbackQuery({
      text: '–î–∞–ª—å–Ω–µ–π—à–µ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –±–æ—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.',
      show_alert: true
    });
  }

  /**
   * Sends guides selection inline keyboard to the user.
   * @param {import('grammy').Context} ctx Grammy context.
   * @returns {Promise<void>}
   */
  async sendGuidesMenu(ctx) {
    const guides = await this.guideService.listAvailableGuides();

    if (!guides.length) {
      await ctx.reply(this.messages.noGuides);
      return;
    }

    const keyboard = new InlineKeyboard();
    guides.forEach((guide) => {
      keyboard.text(guide.title, `guide:${guide.id}`).row();
    });

    let mediaSent = false;
    if (this.menuMediaService) {
      mediaSent = await this.menuMediaService.sendMenuMedia(ctx, {
        replyMarkup: keyboard
      });
    }

    if (!mediaSent) {
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≥–∞–π–¥:', {
        reply_markup: keyboard
      });
    }
  }
}
